"""
聊天室模型

分析:
数据如何发送:转发 客户端发出-->服务器-->转发给其他用户

网络模型如何构建:udp网络模型

用户信息怎么维护:
    服务端保存:什么地方会用,需要什么特征,存什么
        列表  [(name.address)]
        字典  {name:address}
        链表  class node:
                def __init__(self,name,address,next):
                    pass

聊天室的随意收发怎么处理:多进程分别进行收发操作

结构设计:
    封装设计:函数式编程
    功能模块划分: 网络结构搭建
                进入聊天室
                聊天
                退出聊天室
                管理员消息

每个更能客户端和服务端分别做什么

网络功能搭建

通讯协议
    登录:L name   OK表示可以登入
    聊天:C name   ********
    退出:Q name   quit或者终止程序会退出

进入聊天室
    客户端:  输入姓名
            给服务器发请求
            接收反馈结果
            如果不允许进入则重新输入姓名
    服务端:  接收请求,判断请求类型
            判断名字是否存在
            反馈结果
            如果允许进入,通知其他用户,保存用户信息

聊天
    客户端:  创建新的进程
            一个进程收消息
            一个进程发消息
    服务端:  接收请求,判断请求类型
            将消息转发给其他人

退出
    客户端:  输入quit或者点击 x 表示退出
            发送请求给服务器
            结束进程
    服务端:  接收请求,判断请求类型
            删除用户
            将退出信息告知其他人

管理员输入消息
    服务端进行并发操作,子进程发消息给父进程,父进程执行转发操作
"""